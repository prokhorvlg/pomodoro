{"version":3,"sources":["components/NextControl.js","assets/DingSound.wav","components/SoundControl.js","components/ResetControl.js","components/SetsControl.js","components/PlayPauseControl.js","components/TimerFillBar.js","components/Timer.js","components/App.js","index.js"],"names":["NextControl","startNextSession","className","onClick","icon","faForward","SoundControl","timeRemaining","useState","soundEnabled","setSoundEnabled","toggleSound","useEffect","Audio","DingSound","play","faVolumeUp","faVolumeMute","ResetControl","pomosCompleted","setPomosCompleted","faStopwatch","SetsControl","sets","setSets","faMinus","faPlus","PlayPauseControl","timerRunning","toggleTimerRunning","faPause","faPlay","sessionClasses","WORK_SESSION","SHORT_BREAK","LONG_BREAK","DONE","TimerFillBar","timeTotal","sessionType","fillRemaining","setFillRemaining","sessionClass","setSessionClass","xmlns","viewBox","r","cy","cx","fill","strokeWidth","strokeDasharray","strokeDashoffset","strokeLinecap","Timer","setTimeRemaining","sessionString","setTimerRunning","fullReset","content","timeString","setTimeString","timerInterval","setInterval","newTimeRemaining","console","log","clearInterval","minutes","Math","floor","seconds","time","toString","length","times","App","sessionNumber","setSessionNumber","setSessionType","setSessionString","setTimeTotal","retainPomosCompleted","document","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.233bf317.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faForward } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst NextControl = ({ startNextSession }) => {\r\n  const nextMode = () => {\r\n    startNextSession();\r\n  }\r\n\r\n  return (\r\n    <div className=\"control-next\">\r\n      <button className=\"control-next-button\" onClick={() => { nextMode(); }}>\r\n        <FontAwesomeIcon icon={faForward} className=\"fa-icon\" />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NextControl;\r\n","export default __webpack_public_path__ + \"static/media/DingSound.2b0a0d91.wav\";","import React, { useEffect, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport DingSound from '../assets/DingSound.wav';\r\n\r\nconst SoundControl = ({ timeRemaining }) => {\r\n  const [soundEnabled, setSoundEnabled] = useState(true);\r\n\r\n  const toggleSound = () => {\r\n    setSoundEnabled(!soundEnabled);\r\n  }\r\n\r\n  // TIMER SOUND: Plays sound when timeRemaining reaches zero.\r\n  useEffect(() => {\r\n    if (soundEnabled && timeRemaining === 0) {\r\n      new Audio(DingSound).play();\r\n    }\r\n  }, [timeRemaining]);\r\n  \r\n  if (soundEnabled) {\r\n    return (\r\n      <div className=\"control-sound\">\r\n        <button className=\"control-sound-button\" onClick={() => { toggleSound(); }}>\r\n          <FontAwesomeIcon icon={faVolumeUp} className=\"fa-icon\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"control-sound\">\r\n        <button className=\"control-sound-button\" onClick={() => { toggleSound(); }}>\r\n          <FontAwesomeIcon icon={faVolumeMute} className=\"fa-icon\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default SoundControl;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStopwatch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ResetControl = ({ pomosCompleted, setPomosCompleted }) => {\r\n  const resetSession = () => {\r\n    setPomosCompleted(0);\r\n  }\r\n\r\n  return (\r\n    <div className=\"control-reset\">\r\n      <button className=\"control-reset-button\" onClick={() => { resetSession(); }}>\r\n        <div className=\"control-reset-completed\">\r\n          <FontAwesomeIcon icon={faStopwatch} className=\"fa-icon\" />\r\n          <p>{pomosCompleted}</p>\r\n        </div>\r\n        <p>Reset</p>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetControl;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMinus, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SetsControl = ({ sets, setSets }) => {\r\n  const decreaseSets = () => {\r\n    if (sets > 1) {\r\n      setSets((sets) => sets - 1);\r\n    }\r\n  }\r\n\r\n  const increaseSets = () => {\r\n    if (sets < 10) {\r\n      setSets((sets) => sets + 1);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"control-sets\">\r\n      <h2 className=\"control-sets-title\">Sets</h2>\r\n      <div className=\"control-sets-body\">\r\n        <button onClick={() => { decreaseSets(); }}>\r\n          <FontAwesomeIcon icon={faMinus} className=\"fa-icon\" />\r\n        </button>\r\n        <p className=\"control-sets-label\">{sets}</p>\r\n        <button onClick={() => { increaseSets(); }}>\r\n          <FontAwesomeIcon icon={faPlus} className=\"fa-icon\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetsControl;\r\n","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst PlayPauseControl = ({ timerRunning, toggleTimerRunning }) => {  \r\n  if (timerRunning) {\r\n    return (\r\n      <div className=\"play-pause-control\">\r\n        <button className=\"play-pause-button\" onClick={() => { toggleTimerRunning(); }}>\r\n          <FontAwesomeIcon icon={faPause} className=\"fa-icon\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"play-pause-control\">\r\n        <button className=\"play-pause-button\" onClick={() => { toggleTimerRunning(); }}>\r\n          <FontAwesomeIcon icon={faPlay} className=\"fa-icon\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default PlayPauseControl;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// Contains the CSS classes that will be applied to SVG element to determine color.\r\nconst sessionClasses = {\r\n  WORK_SESSION: \"color-work\",\r\n  SHORT_BREAK: \"color-short-break\",\r\n  LONG_BREAK: \"color-long-break\",\r\n  DONE: \"color-done\"\r\n}\r\n\r\nconst TimerFillBar = ({ timeRemaining, timeTotal, sessionType }) => {\r\n  const [fillRemaining, setFillRemaining] = useState(0);\r\n  const [sessionClass, setSessionClass] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fraction = timeRemaining / timeTotal;\r\n    setFillRemaining(440 - (440 * fraction));\r\n  }, [timeRemaining]);\r\n\r\n  useEffect(() => {\r\n    setSessionClass(sessionClasses[sessionType]);\r\n  }, [sessionType]);\r\n\r\n  return (\r\n    <div className=\"timer-dial\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 162 162\">\r\n        <circle r=\"69.85699\" cy=\"81\" cx=\"81\" fill=\"none\" className=\"timer-faded-circle\"\r\n          strokeWidth=\"1\" \r\n          />\r\n        <circle r=\"69.85699\" cy=\"81\" cx=\"81\" fill=\"none\" className={sessionClass}\r\n          strokeWidth=\"6\" \r\n          strokeDasharray=\"440\"\r\n          strokeDashoffset={fillRemaining}\r\n          strokeLinecap=\"round\"\r\n          />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerFillBar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PlayPauseControl from './PlayPauseControl';\r\nimport TimerFillBar from './TimerFillBar';\r\n\r\n// TIME_MULTIPLIER: Controls the rate at which time progresses in the timer.\r\nconst TIME_MULTIPLIER = 0.001;\r\n\r\nconst Timer = ({ startNextSession, timeRemaining, setTimeRemaining, sessionString, sessionType, timeTotal, timerRunning, setTimerRunning, fullReset, content }) => {\r\n  // Contains the time content displayed to user in timer dial.\r\n  const [timeString, setTimeString] = useState(null);\r\n\r\n  // TIMER: Contains the logic which controls the timer interval.\r\n  useEffect(() => {\r\n    let timerInterval;\r\n    if (timerRunning) {\r\n      timerInterval = setInterval(() => {\r\n        const newTimeRemaining = timeRemaining - 1;\r\n        if (newTimeRemaining === -1) {\r\n          startNextSession();\r\n          console.log(\"ended session\");\r\n        } else {\r\n          setTimeRemaining(newTimeRemaining);\r\n        }\r\n      }, 1000 * TIME_MULTIPLIER)\r\n    }\r\n    return () => clearInterval(timerInterval);\r\n  }, [timerRunning, timeRemaining]);\r\n\r\n  // TIMER PARSING: Parses the time remaining into a printable string.\r\n  useEffect(() => {\r\n    const minutes = Math.floor(timeRemaining / 60);\r\n    const seconds = timeRemaining - minutes * 60;\r\n    let time = \"\";\r\n    if (minutes.toString().length === 1) {\r\n      time = \"0\" + minutes.toString();\r\n    } else {\r\n      time = minutes.toString();\r\n    }\r\n    time += \":\";\r\n    if (seconds.toString().length === 1) {\r\n      time = time + \"0\" + seconds.toString();\r\n    } else {\r\n      time = time + seconds.toString();\r\n    }\r\n    setTimeString(time);\r\n  }, [timeRemaining]);\r\n\r\n  useEffect(() => {\r\n    if (sessionType === \"DONE\") {\r\n      setTimeRemaining(0);\r\n    }\r\n  }, [sessionType]);\r\n\r\n  const toggleTimerRunning = () => {\r\n    if (sessionType === \"DONE\") {\r\n      fullReset(true);\r\n    }\r\n    setTimerRunning(!timerRunning);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"timer\">\r\n        <button className=\"timer-button\" onClick={() => { toggleTimerRunning(); }}>\r\n          <TimerFillBar \r\n              timeRemaining={timeRemaining}\r\n              timeTotal={timeTotal}\r\n              sessionType={sessionType}\r\n              content={content}\r\n            />\r\n          <div className=\"timer-time-remaining\">\r\n            <p>{timeString}</p>\r\n          </div>\r\n          <div className=\"timer-mode\">\r\n            <p>{sessionString}</p>\r\n          </div>\r\n        </button>\r\n      </div>\r\n      <PlayPauseControl \r\n          timerRunning={timerRunning}\r\n          toggleTimerRunning={toggleTimerRunning}\r\n        />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import React, { useEffect, useState } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStopwatch } from '@fortawesome/free-solid-svg-icons';\n\nimport NextControl from './NextControl';\nimport SoundControl from './SoundControl';\nimport ResetControl from './ResetControl';\nimport SetsControl from './SetsControl';\nimport Timer from './Timer';\n\n// content: Values displayed to the user.\nconst content = {\n  WORK_SESSION: \"work\",\n  SHORT_BREAK: \"short break\",\n  LONG_BREAK: \"long break\",\n  DONE: \"done!\"\n};\n\n// times: Number of seconds pre-set for each session type. \nconst times = {\n  WORK_SESSION: 1500,\n  SHORT_BREAK: 300,\n  LONG_BREAK: 1500,\n};\n\nconst App = () => {\n  // STATE: Contains data relevant to application.\n  \n  // Exact id of current session, used to determine what type of session to run. \n  const [sessionNumber, setSessionNumber] = useState(1);\n  // Type of current session, ID used internally.\n  const [sessionType, setSessionType] = useState(content.WORK_SESSION);\n  // Type of current session, displayed to user in timer dial.\n  const [sessionString, setSessionString] = useState(content.WORK_SESSION);\n\n  // Contains number of total pomo-break pairs. Adjustable by user.\n  const [sets, setSets] = useState(4);\n  // Total number of pomo sessions completed by user, seperate from session count used for internal calculations.\n  const [pomosCompleted, setPomosCompleted] = useState(0);\n\n  // Contains total number of seconds in current session.\n  const [timeTotal, setTimeTotal] = useState(null);\n  // Contains number of seconds remaining in current session.\n  const [timeRemaining, setTimeRemaining] = useState(null);\n\n  // Contains whether or not the timer is running or paused.\n  const [timerRunning, setTimerRunning] = useState(false);\n\n  // startNextSession: Decides how to start the next session based on the previous session.\n  const startNextSession = () => {\n    console.log(sessionNumber);\n    if (sets * 2 <= sessionNumber) {\n      // reset the pomo\n      console.log(\"DONE!\", sessionNumber);\n      setTimerRunning(false);\n      setSessionString(content.DONE);\n      setSessionType(\"DONE\");\n    } else if (((sets * 2) - 2) === sessionNumber) {\n      // final pomo session\n      console.log(\"final pomo!\");\n      setSessionNumber((sessionNumber) => sessionNumber + 1);\n      setSessionString(content.WORK_SESSION);\n      setSessionType(\"WORK_SESSION\");\n      setTimeRemaining(times.WORK_SESSION);\n      setTimeTotal(times.WORK_SESSION);\n    } else if (((sets * 2) - 1) === sessionNumber) {\n      // long break at the end\n      console.log(\"final long break!\");\n      setSessionNumber((sessionNumber) => sessionNumber + 1);\n      setPomosCompleted((pomosCompleted) => pomosCompleted + 1);\n      setSessionString(content.LONG_BREAK);\n      setSessionType(\"LONG_BREAK\");\n      setTimeRemaining(times.LONG_BREAK);\n      setTimeTotal(times.LONG_BREAK);\n    } else {\n      if (sessionNumber % 2 === 0) {\n        // regular pomo session\n        console.log(\"normal pomo!\");\n        setSessionNumber((sessionNumber) => sessionNumber + 1);\n        setSessionString(content.WORK_SESSION);\n        setSessionType(\"WORK_SESSION\");\n        setTimeRemaining(times.WORK_SESSION);\n        setTimeTotal(times.WORK_SESSION);\n      } else if (sessionNumber % 2 === 1) {\n        // regular short break\n        console.log(\"normal short break!\");\n        setSessionNumber((sessionNumber) => sessionNumber + 1);\n        setPomosCompleted((pomosCompleted) => pomosCompleted + 1);\n        setSessionString(content.SHORT_BREAK);\n        setSessionType(\"SHORT_BREAK\");\n        setTimeRemaining(times.SHORT_BREAK);\n        setTimeTotal(times.SHORT_BREAK);\n      }\n    }\n  }\n\n  // fullReset: Reset the app state to start mode.\n  const fullReset = (retainPomosCompleted = false) => {\n    console.log(\"full reset.\");\n    console.log(\"normal pomo!\");\n    setSessionNumber(1);\n    setSessionString(content.WORK_SESSION);\n    setSessionType(\"WORK_SESSION\");\n    setTimeRemaining(times.WORK_SESSION);\n    setTimeTotal(times.WORK_SESSION);\n    if (!retainPomosCompleted) {\n      setPomosCompleted(0);\n    }\n  }\n\n  // RESET ON-LOAD: Set app into ideal state on app load.\n  useEffect(() => {\n    fullReset();\n  }, []);  \n\n  useEffect(() => {\n    document.title = sessionString + ' - pomodoro';\n  }, [sessionString]);\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"app-title\">\n        <FontAwesomeIcon icon={faStopwatch} className=\"fa-icon\" />\n        <h1>pomodoro</h1>\n      </div>\n      <div className=\"app-body\">\n        <SetsControl \n            sets={sets}\n            setSets={setSets}\n          />\n        <Timer \n            startNextSession={startNextSession}\n            timeRemaining={timeRemaining}\n            setTimeRemaining={setTimeRemaining}\n            sessionString={sessionString}\n            sessionType={sessionType}\n            timeTotal={timeTotal}\n            timerRunning={timerRunning}\n            setTimerRunning={setTimerRunning}\n            fullReset={fullReset}\n            content={content}\n          />\n      </div>\n      <div className=\"app-controls\">\n        <ResetControl \n            pomosCompleted={pomosCompleted}\n            setPomosCompleted={setPomosCompleted}\n          />\n        <NextControl \n            startNextSession={startNextSession}\n          />\n        <SoundControl \n            timeRemaining={timeRemaining}\n          />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/styles.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}